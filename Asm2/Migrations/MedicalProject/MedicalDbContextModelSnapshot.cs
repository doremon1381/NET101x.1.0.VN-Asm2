// <auto-generated />
using System;
using MedicalService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Asm2.Migrations.MedicalProject
{
    [DbContext(typeof(MedicalDbContext))]
    partial class MedicalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalModel.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalModel.Diagnosis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique()
                        .HasFilter("[AppointmentId] IS NOT NULL");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("MedicalModel.Hospital", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("MedicalModel.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HospitalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("HospitalId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MedicalModel.Appointment", b =>
                {
                    b.HasOne("MedicalModel.Person", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalModel.Person", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("MedicalModel.BookingSchedule", "BookingSchedule", b1 =>
                        {
                            b1.Property<string>("AppointmentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpireAt")
                                .HasColumnType("datetime2");

                            b1.Property<int>("Priority")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("BookingSchedule")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalModel.Diagnosis", b =>
                {
                    b.HasOne("MedicalModel.Appointment", "Appointment")
                        .WithOne("Diagnosis")
                        .HasForeignKey("MedicalModel.Diagnosis", "AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MedicalModel.Person", b =>
                {
                    b.HasOne("MedicalModel.Hospital", null)
                        .WithMany("Doctor")
                        .HasForeignKey("HospitalId");

                    b.OwnsOne("MedicalModel.DoctorInfo", "DoctorInfo", b1 =>
                        {
                            b1.Property<string>("PersonId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double?>("ExperienceInYrs")
                                .HasColumnType("float");

                            b1.Property<string>("HospitalId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PositionAtHospital")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProfileImageUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Specialty")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SubSpecialties")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.HasIndex("HospitalId");

                            b1.ToTable("Persons");

                            b1.HasOne("MedicalModel.Hospital", "Hospital")
                                .WithMany()
                                .HasForeignKey("HospitalId");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.Navigation("Hospital");
                        });

                    b.Navigation("DoctorInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalModel.Appointment", b =>
                {
                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("MedicalModel.Hospital", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalModel.Person", b =>
                {
                    b.Navigation("DoctorAppointments");

                    b.Navigation("PatientAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
